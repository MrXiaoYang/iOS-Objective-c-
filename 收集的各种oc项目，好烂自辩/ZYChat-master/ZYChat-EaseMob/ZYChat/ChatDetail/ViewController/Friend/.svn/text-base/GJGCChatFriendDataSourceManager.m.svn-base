//
//  GJGCChatFriendDataSourceManager.m
//  GJGroupChat
//
//  Created by ZYVincent on 14-11-12.
//  Copyright (c) 2014年 ganji. All rights reserved.
//

#import "GJGCChatFriendDataSourceManager.h"
#import "GJGCHostAttrsManager.h"
#import "GJGCIMMsgSubManager.h"
#import "GJGCFriendMsgDBAPI.h"
#import "GJGCIMRecieveMsgManager.h"
#import "GJGCContactManager.h"

#import "GJGCCallbackManagerHeader.h"


@interface GJGCChatFriendDataSourceManager () <GJGCCallbackObserverDelegate>
{
    
}

@end

@implementation GJGCChatFriendDataSourceManager

- (void)dealloc
{
    [self removeObserver];
}

- (instancetype)initWithTalk:(GJGCChatFriendTalkModel *)talk withDelegate:(id<GJGCChatDetailDataSourceManagerDelegate>)aDelegate
{
    if (self = [super initWithTalk:talk withDelegate:aDelegate]) {
        [self addObserver];
        self.title = talk.toUserName;
        
        _isMyFriend = [[GJGCContactManager shared]isMyFriend:self.taklInfo.toId];
        
        /* 创建陌生人聊天mini */
        [self createRemindTipWhileNotMyFriend];
        
        /* 观察接收消息 */
        [GJCFNotificationCenter addObserver:self selector:@selector(observeRecieveFriendMsg:) name:GJGC_NOTIFICATION_RECEIVE_TALK_UPDATE object:nil];
        [GJCFNotificationCenter addObserver:self selector:@selector(observeLocalMessageUpdate:) name:GJGCChatMessageSendManagerUpdateLocalSuccessNoti object:nil];
        [GJCFNotificationCenter addObserver:self selector:@selector(observeHistoryMessage:) name:GJGC_NOTIFICATION_RECEIVE_HISTORYMSG object:nil];

        /* 观察附件上传 */
        [self observeMediaUploadSuccessNoti];

        [self readLastMessagesFromDB];
        
    }
    return self;
}

#pragma mark - 如果是陌生人第一次聊天，插入提示文案

- (void)createRemindTipWhileNotMyFriend
{
    if (!_isMyFriend) {
        
        [[GJGCFriendMsgDBAPI share] createDB:@"private" toId:self.taklInfo.toId];

        /* 是否存在这条提示了 */
        BOOL isExistThisMini = [[GJGCFriendMsgDBAPI share] isNotFriendMiniMsgExistWithToId:self.taklInfo.toId];
        
        if (!isExistThisMini) {
            
            GJGCIMFriendMsgModel *friendMsg = [[GJGCIMFriendMsgModel alloc]init];
            friendMsg.msgId = @"0";
            friendMsg.contentType = @"notFriendMini";
            friendMsg.contents = @"未成为对方好友前不能发送语音信息";
            friendMsg.sendTime = @([[NSDate date] timeIntervalSince1970]);
            friendMsg.msgSeq = @"0";
            friendMsg.msgType = @"private";
            friendMsg.state = @(1);
            friendMsg.isAck = YES;
            friendMsg.isRead = YES;
            friendMsg.toId = self.taklInfo.toId;
            friendMsg.senderId = self.taklInfo.toId;
            friendMsg.toName = self.taklInfo.toUserName;
            
            
            NSInteger lastLocalMsgId;
            BOOL isSuccess = [[GJGCFriendMsgDBAPI share]insertOrUpdateModel:friendMsg lastRowId:&lastLocalMsgId];
            
            if (isSuccess) {
                

            }
        }
    }
}

#pragma mark - 观察好友关系变更

- (void)observeRemoveOrAddFriendNoti:(NSDictionary *)userInfo
{
    NSString *actionType = userInfo[@"type"];
    NSString *friendId = userInfo[@"friendId"];
    
    if (![friendId isEqualToString:self.taklInfo.toId]) {
        return;
    }
    
    if ([actionType isEqualToString:@"add"] || [actionType isEqualToString:@"update"]) {
        
        _isMyFriend = YES;
        
    }
    
    if ([actionType isEqualToString:@"remove"] || [actionType isEqualToString:@"none"]) {
        
        _isMyFriend = NO;
    }
    
    if (self.delegate && [self.delegate respondsToSelector:@selector(dataSourceManagerRequireChangeAudioRecordEnableState:state:)]) {
        [self.delegate dataSourceManagerRequireChangeAudioRecordEnableState:self state:_isMyFriend];
    }

}

#pragma mark - 观察到UI更新了附件地址消息

- (void)observeMediaUploadSuccessNoti
{
    [GJCFNotificationCenter addObserver:self selector:@selector(recieveMediaUploadSuccessNoti:) name:GJGCChatMessageSendManagerDidUploadMediaMessageSuccessNoti object:nil];
}

- (void)recieveMediaUploadSuccessNoti:(NSNotification *)noti
{
    NSDictionary *notiInfo = noti.object;
    
    NSString *type = notiInfo[@"type"];
    NSString *url = notiInfo[@"data"];
    NSString *msgId = notiInfo[@"msgId"];
    NSString *toId = notiInfo[@"toId"];
    
    if (![toId isEqualToString:self.taklInfo.toId]) {
        return;
    }
    
    if ([type isEqualToString:@"audio"]) {
        
        [self updateAudioUrl:url withLocalMsg:msgId toId:toId];
    }
    
    if ([type isEqualToString:@"image"]) {
        
        [self updateImageUrl:url withLocalMsg:msgId toId:toId];
    }
}

#pragma mark - 观察本地发送消息创建成功和消息状态更新通知

- (void)observeLocalMessageUpdate:(NSNotification *)noti
{
    NSDictionary *passResult = (NSDictionary *)noti.object;
    GJGCChatMessageSendMessageType type = [[passResult objectForKey:@"type"]intValue];
    GJGCIMFriendMsgModel *msgModel = [passResult objectForKey:@"data"];

    if ( type == GJGCChatMessageSendMessageTypeFriendPrivate && [msgModel.toId isEqualToString:self.taklInfo.toId]) {
        
        GJGCLogVincent(@"好友对话更新一条消息 :%@  sendStatus:%d",msgModel.localMsgId,[msgModel.state intValue]);
        [self updateContentModelStateWithMsgModel:msgModel];
    }
}

#pragma mark - 观察收到的消息，自己发送的消息也会当成一条收到的消息来处理插入

- (void)observeRecieveFriendMsg:(NSNotification *)noti
{
    GJGCChatFriendTalkModel *talkModel = (GJGCChatFriendTalkModel *)noti.userInfo[@"data"];
    
    if (talkModel.talkType != GJGCChatFriendTalkTypePrivate) {
        return;
    }
    
    /*是否当前对话的信息 */
    if (![talkModel.toId isEqualToString:self.taklInfo.toId]) {
        
        GJGCLogVincent(@"not this talk msg:%@",talkModel.toId);
        
        return;
        
    }
    
    GJGCLogVincent(@"好友对话 收到一组消息 msg:%@",talkModel.msgArray);
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        [self recieveFriendMsg:talkModel];
        
    });
}

- (void)recieveFriendMsg:(GJGCChatFriendTalkModel *)talkModel
{
    for (GJGCIMFriendMsgModel *msgModel in talkModel.msgArray) {
        
        GJGCChatContentBaseModel *contenModel = [self addFriendMsg:msgModel];

        if (talkModel.msgArray.count < 4) {
            
            [self updateTheNewMsgTimeString:contenModel];

        }

    }
    
    if (talkModel.msgArray.count >= 4 ) {
        
        [self resortAllChatContentBySendTime];        
    }
    
    if (self.delegate && [self.delegate respondsToSelector:@selector(dataSourceManagerRequireUpdateListTable:)]) {
        
        GJGCLogVincent(@"chatVC reload data:%ld",(long)(self.totalCount-1));
        
        [self.delegate dataSourceManagerRequireUpdateListTable:self];
        
    }
}

#pragma mark - 观察历史消息
- (void)observeHistoryMessage:(NSNotification *)noti
{
    dispatch_async(dispatch_get_main_queue(), ^{
        
        [self recieveHistoryMessage:noti];
        
    });
}

- (void)recieveHistoryMessage:(NSNotification *)noti
{
    /* 是否当前会话的历史消息 */
    GJGCIMHistoryMsgResultModel *resultModel = noti.userInfo[@"data"];
    
    if (![resultModel isEqualTalk:self.taklInfo] || ![resultModel.observerIdentifier isEqualToString:self.uniqueIdentifier]) {
        
        return;
    }
    
    NSArray *msgArray = resultModel.msgArray;
    
    BOOL isFirstPull = resultModel.isFirstPull;
    
    NSInteger errorCode = resultModel.errorCode;
    
    NSInteger requestMsgCount = resultModel.requestMsgCount;
    
    /* 所有历史消息都加载完了 */
    if (!isFirstPull && ![GJGCUtilHelper isNetworkOrServerInternalError:errorCode] && msgArray.count == 0) {
        
        /**
         *  当历史数据和本地区间有交集的时候，重新尝试获取一次本地历史消息
         */
        NSArray *reTryLocalMsgArray = [self reTryGetLocalMessageWhileHistoryMessageIsSubMessagesOfLocalMessages];
        
        if (reTryLocalMsgArray.count > 0) {
            
            msgArray = reTryLocalMsgArray;
            
        }
        
    }

    if (msgArray && msgArray.count > 0 && ![GJGCUtilHelper isNetworkOrServerInternalError:errorCode]) {
        
        /* 分发到UI层 */
        for (GJGCIMFriendMsgModel *msgModel in msgArray) {
            [self addFriendMsg:msgModel];
        }
        
        /* 重排时间顺序 */
        [self resortAllChatContentBySendTime];
        
        if (isFirstPull) {
            
            GJGCLogVincent(@"加载完成好友第一次拉取历史消息");
            self.isFinishFirstHistoryLoad = YES;

            /* 悬停在第一次加载历史消息的最后一条消息上 */
            if (self.delegate && [self.delegate respondsToSelector:@selector(dataSourceManagerRequireFinishLoadMore:)]) {
                
                [self.delegate dataSourceManagerRequireFinishLoadMore:self];
                
            }
            
        }else{
            
            /* 悬停在第一次加载后的第一条消息上 */
            if (self.delegate && [self.delegate respondsToSelector:@selector(dataSourceManagerRequireFinishRefresh:)]) {
                
                [self.delegate dataSourceManagerRequireFinishRefresh:self];
            }
            
        }
        
    }else{
        
        if (errorCode == kCFURLErrorNotConnectedToInternet) {
            
            [[NSNotificationCenter defaultCenter] postNotificationName:GJGC_NOTIFICATION_TOAST_NAME object:nil userInfo:@{@"message":@"似乎已断开与互联网链接"}];

        }

        if (isFirstPull) {
            
            self.isFinishFirstHistoryLoad = YES;
            
            /* 悬停在第一次加载后的第一条消息上 */
            if (self.delegate && [self.delegate respondsToSelector:@selector(dataSourceManagerRequireFinishLoadMore:)]) {
                
                [self.delegate dataSourceManagerRequireFinishLoadMore:self];
            }
            
            return;
        }

        if (self.delegate && [self.delegate respondsToSelector:@selector(dataSourceManagerRequireFinishRefresh:)]) {
            [self.delegate dataSourceManagerRequireFinishRefresh:self];
        }
        
    }
    
    
    /* 如果没有历史消息了 */
    if (!isFirstPull && ![GJGCUtilHelper isNetworkOrServerInternalError:errorCode] && requestMsgCount == 0) {
        
        self.isFinishLoadAllHistoryMsg = YES;
    }
}

- (GJGCChatFriendContentModel *)addFriendMsg:(GJGCIMFriendMsgModel *)msgModel
{
    /* 格式化消息 */
    GJGCChatFriendContentModel *chatContentModel = [[GJGCChatFriendContentModel alloc]init];
    chatContentModel.baseMessageType = GJGCChatBaseMessageTypeChatMessage;
    chatContentModel.toId = GJCFStringFromInt([msgModel.toId intValue]);
    chatContentModel.toUserName = self.taklInfo.toUserName;
    chatContentModel.isFromSelf = [msgModel.isMySendMsg boolValue];
    chatContentModel.sendStatus = [msgModel.state intValue];
    chatContentModel.sendTime = [msgModel.sendTime longLongValue];
    chatContentModel.senderId = msgModel.senderId;
    chatContentModel.localMsgId = GJCFStringFromInt([msgModel.localMsgId intValue]);
    chatContentModel.faildReason = msgModel.faildReason;
    chatContentModel.faildType = [msgModel.faildType intValue];
    chatContentModel.talkType = self.taklInfo.talkType;
    chatContentModel.contentHeight = [msgModel.height floatValue];
    if (GJCFStringIsNull(msgModel.contentSize)) {
        chatContentModel.contentSize = CGSizeZero;
    }else{
        chatContentModel.contentSize = CGSizeFromString(msgModel.contentSize);
    }
    chatContentModel.sessionId = msgModel.sessionId;
    
    /* 格式内容字段 */
    GJGCChatFriendContentType resultType = [self formateChatFriendContent:chatContentModel withMsgModel:msgModel];
    
    if (resultType != GJGCChatFriendContentTypeNotFound) {
        
        [self addChatContentModel:chatContentModel];

    }
    
    return chatContentModel;
}

#pragma mark - 数据库读取最后二十条信息

- (void)readLastMessagesFromDB
{
    NSArray *lastMessageArray = [[GJGCFriendMsgDBAPI share]getLastMsgWithCount:20 withToId:self.taklInfo.toId msgType:@"private"];
    
    for (NSInteger i = lastMessageArray.count - 1; i >= 0; i--) {
        
        GJGCIMFriendMsgModel *msgModel = [lastMessageArray objectAtIndex:i];
        
        GJGCLogVincent(@"readLastMessageArray index:%ld sendTime:%@",(long)i,msgModel.sendTime);
        
        [self addFriendMsg:msgModel];
    }
    
    /* 更新时间区间 */
    [self updateAllMsgTimeShowString];
    
    /* 设置加载完后第一条消息和最后一条消息 */
    [self resetFirstAndLastMsgId];
}

#pragma mark - 删除消息

- (NSArray *)deleteMessageAtIndex:(NSInteger)index
{
    GJGCChatFriendContentModel *contentModel = (GJGCChatFriendContentModel *)[self contentModelAtIndex:index];
    
    BOOL isDelete = [[GJGCFriendMsgDBAPI share]updateIsDelete:1 localMsgId:@([contentModel.localMsgId intValue]) msgType:@"private" toId:self.taklInfo.toId];
    
    NSMutableArray *willDeletePaths = [NSMutableArray array];

    if (isDelete) {
        
        /* 更新最近联系人列表得最后一条消息 */
        if (index == self.totalCount - 1 && self.chatContentTotalCount > 1) {
            
            GJGCChatFriendContentModel *lastContentAfterDelete = nil;
            lastContentAfterDelete = (GJGCChatFriendContentModel *)[self contentModelAtIndex:index-1];
            if (lastContentAfterDelete.isTimeSubModel) {
                
                if (self.chatContentTotalCount - 1 >= 1) {
                    
                    lastContentAfterDelete = (GJGCChatFriendContentModel *)[self contentModelAtIndex:index - 2];
                    
                }
                
            }
            
            if (lastContentAfterDelete) {
                
                /* 更新最近会话信息 */
                [self updateLastMsg:lastContentAfterDelete];
                
            }else{
                
                [[GJGCMsgBoxInterfaseHandle getChatListInterfase]clearContentWithToId:self.taklInfo.toId msgType:GJGCTalkTypeString(self.taklInfo.talkType)];
            }

        }
        
        NSString *willDeleteTimeSubIdentifier = [self updateMsgContentTimeStringAtDeleteIndex:index];
        
        [self removeChatContentModelAtIndex:index];
        
        [willDeletePaths addObject:[NSIndexPath indexPathForRow:index inSection:0]];
        
        if (willDeleteTimeSubIdentifier) {
            
            [willDeletePaths addObject:[NSIndexPath indexPathForRow:index - 1 inSection:0]];
            
            [self removeTimeSubByIdentifier:willDeleteTimeSubIdentifier];
        }
    }
    
    return willDeletePaths;
}

- (void)pushAddMoreMsg:(NSArray *)array
{
    /* 分发到UI层 */
    for (GJGCIMFriendMsgModel *msgModel in array) {
        [self addFriendMsg:msgModel];
    }
    
    /* 重排时间顺序 */
    [self resortAllChatContentBySendTime];
    
    /* 上一次悬停的第一个cell的索引 */    
    if (self.delegate && [self.delegate respondsToSelector:@selector(dataSourceManagerRequireFinishRefresh:)]) {
        
        __weak typeof(self) weakSelf = self;
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [weakSelf.delegate dataSourceManagerRequireFinishRefresh:weakSelf];
        });
        
        
    }
}

#pragma mark - 更新附件地址

- (void)updateAudioUrl:(NSString *)audioUrl withLocalMsg:(NSString *)localMsgId toId:(NSString *)toId
{
    for (GJGCChatFriendContentModel *contentModel in self.chatListArray) {
        
        if ([contentModel.localMsgId longLongValue] == [localMsgId longLongValue]) {
            
            GJGCLogVincent(@"更新内存中语音的地址为:%@",audioUrl);
            contentModel.audioModel.localStorePath = [[GJCFCachePathManager shareManager]mainAudioCacheFilePathForUrl:audioUrl];
            
            break;
        }
        
    }
}

- (void)updateImageUrl:(NSString *)imageUrl withLocalMsg:(NSString *)localMsgId toId:(NSString *)toId
{
    for (GJGCChatFriendContentModel *contentModel in self.chatListArray) {
        
        if ([contentModel.localMsgId longLongValue] == [localMsgId longLongValue]) {
            
            contentModel.imageMessageUrl = imageUrl;
            
            GJGCLogVincent(@"更新内存中图片的地址为:%@",imageUrl);
            
            break;
        }
        
    }
}

#pragma mark - 更新数据库中消息得高度

- (void)updateMsgContentHeightWithContentModel:(GJGCChatContentBaseModel *)contentModel
{
    [[GJGCFriendMsgDBAPI share] updateMsgContentHeight:@(contentModel.contentHeight) contentSize:contentModel.contentSize withToId:self.taklInfo.toId withLocalMsgId:contentModel.localMsgId];
}

#pragma mark - 重新尝试所有发送状态的消息

- (void)reTryAllSendingStateMsgDetailAction
{
    NSArray *sendingStateMsgs = [[GJGCFriendMsgDBAPI share]getAllSendingStateMsgWithToId:self.taklInfo.toId];
    
    if (sendingStateMsgs && sendingStateMsgs.count > 0) {
        
        for (GJGCIMMsgBaseModel *msgModel in sendingStateMsgs) {
            
            GJGCLogVincent(@"重新尝试发送中状态消息:%@",msgModel.localMsgId);
            [[GJGCChatMessageSendManager shareManager] reSendMessageWithLocalMsgId:GJCFStringFromInt([msgModel.localMsgId longLongValue]) talkType:self.taklInfo.talkType toId:self.taklInfo.toId];
        }
    }

}

- (void)updateAudioFinishRead:(NSString *)localMsgId
{
    [[GJGCFriendMsgDBAPI share] updateAudioMsgFinishRead:[localMsgId longLongValue] toId:self.taklInfo.toId];
}

#pragma mark - GJGCCallbackObserverDelegate

-(void)callbackWithType:(GJGCBusiness2Cmd)type error:(NSError *)error object:(NSDictionary*)param
{
    switch (type) {
        case GJGCBusiness2Cmd_ContactListChange: {
            NSArray *addArray = param[@"add"];
            NSArray *removeArray = param[@"remove"];
            for (GJGCContactModel *model in addArray) {
                [self observeRemoveOrAddFriendNoti:@{@"type":@"add",@"friendId":model.friendId}];
            }
            for (GJGCContactModel *model in removeArray) {
                [self observeRemoveOrAddFriendNoti:@{@"type":@"remove",@"friendId":model.friendId}];
            }
            break;
        }
        case GJGCBusiness2Cmd_ImGetImUserInfo: {
            [self observeRemoveOrAddFriendNoti:param];
            break;
        }
        default:
            break;
    }
}

- (void)addObserver
{
    id<GJGCCallbackObserverCenterInterface> observer = GJGCCallbackObserverCenter;
    [observer addObserver:self withType:GJGCBusiness2Cmd_ContactListChange];
    [observer addObserver:self withType:GJGCBusiness2Cmd_ImGetImUserInfo];
}

- (void)removeObserver
{
    [GJGCCallbackObserverCenter delObserverAllType:self];
}

- (void)testDriftMessage
{
    GJGCChatFriendContentModel *chatContentModel = [[GJGCChatFriendContentModel alloc]init];
    chatContentModel.baseMessageType = GJGCChatBaseMessageTypeChatMessage;
    chatContentModel.toId = @"2334455";
    chatContentModel.toUserName = self.taklInfo.toUserName;
    chatContentModel.isFromSelf = NO;
    chatContentModel.sendStatus = 1;
    chatContentModel.sendTime = [[NSDate date]timeIntervalSince1970];
    chatContentModel.senderId = GJCFStringFromInt([self.taklInfo.toId intValue]);
    chatContentModel.localMsgId = @"111111";
    chatContentModel.faildReason = @"null";
    chatContentModel.faildType = 0;
    chatContentModel.talkType = self.taklInfo.talkType;
    chatContentModel.contentHeight = 0.f;
    chatContentModel.contentSize = CGSizeZero;
    chatContentModel.sessionId = self.taklInfo.toId;
    chatContentModel.contentType = GJGCChatFriendContentTypeDriftBottle;
    
    chatContentModel.driftBottleContentString = [GJGCChatFriendCellStyle formateDriftBottleContent:@"多么美好的一天做个测试多么美好的一天做个测试多么美好的一天做个测试多么美好的一天做个测试多么美好的一天"];
    chatContentModel.imageMessageUrl = @"http://img4q.duitang.com/uploads/item/201312/05/20131205172457_JZzNH.jpeg";
    chatContentModel.headUrl = @"http://upload.wuhan.net.cn/2014/0721/1405909402350.jpg";
    
    /* 格式内容字段 */
    [self addChatContentModel:chatContentModel];

    if (self.delegate && [self.delegate respondsToSelector:@selector(dataSourceManagerRequireUpdateListTable:)]) {
        
        [self.delegate dataSourceManagerRequireUpdateListTable:self];
        
    }
}

@end
